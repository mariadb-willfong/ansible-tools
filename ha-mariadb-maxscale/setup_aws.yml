---
- name: Setup EC2 instances with specific software
  hosts: localhost
  gather_facts: no
  collections:
    - amazon.aws
  vars:
    aws_region: ap-southeast-1
    vpc_id: vpc-0a1fa332044f51c6f
    subnet_id: subnet-040a2b303c244e710
    instance_type: t3.micro
    key_name: WILLFONG
    mariadb_inventory_file: "./mariadb.ini"
    maxscale_inventory_file: "./maxscale.ini"

  tasks:
    - name: Get current public IP address
      uri:
        url: "https://hostdetail.net"
        method: GET
        return_content: yes
      register: web_response

    - name: Set fact for my public IP
      set_fact:
        my_public_ip: "{{ web_response.json.ip }}/32"

    - name: Lookup latest Ubuntu 22.04 LTS AMI
      ec2_ami_info:
        region: "{{ aws_region }}"
        owners: "099720109477" # Canonical's owner ID
        filters:
          name: "ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*"
          architecture: "x86_64"
          root-device-type: "ebs"
          virtualization-type: "hvm"
          state: "available"
      register: ami_info

    - name: Create security group
      ec2_group:
        name: "AllTrafficGroup"
        description: "Security group allowing all traffic within the same group"
        region: "{{ aws_region }}"
        vpc_id: "{{ vpc_id }}"
        rules:
          - proto: all
            group_name: "AllTrafficGroup"
            rule_desc: "Allow all inbound traffic from itself"
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: "{{ my_public_ip }}"
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
            rule_desc: "Allow all outbound traffic"
      register: security_group

    - name: Provision EC2 instances
      ec2_instance:
        name: "{{ item }}"
        image_id: "{{ ami_info.images | sort(attribute='creation_date') | last | json_query('image_id') }}"
        instance_type: "{{ instance_type }}"
        key_name: "{{ key_name }}"
        region: "{{ aws_region }}"
        security_group: "{{ security_group.group_id }}"
        vpc_subnet_id: "{{ subnet_id }}"
        network:
          assign_public_ip: yes

      loop:
        - "maxscale1"
        - "maxscale2"
        - "mariadb1"
        - "mariadb2"
      register: ec2_instances

    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.instances[0].public_dns_name }}"
        port: 22
        delay: 10
        timeout: 300
      loop: "{{ ec2_instances.results }}"

    - name: Tag instances
      ec2_tag:
        resource: "{{ item.instances[0].instance_id }}"
        region: "{{ aws_region }}"
        state: present
        tags:
          Name: "{{ item.instances[0].tags.Name }}"
      loop: "{{ ec2_instances.results }}"

    - name: Add instance details to groups in inventory
      lineinfile:
        path: "{{ mariadb_inventory_file }}"
        line: "{{ item.instances[0].public_dns_name }}"
        create: yes
      when: "'mariadb' in item.instances[0].tags.Name"
      loop: "{{ ec2_instances.results }}"

    - name: Add instance details to groups in inventory
      lineinfile:
        path: "{{ maxscale_inventory_file }}"
        line: "{{ item.instances[0].public_dns_name }}"
        create: yes
      when: "'maxscale' in item.instances[0].tags.Name"
      loop: "{{ ec2_instances.results }}"
